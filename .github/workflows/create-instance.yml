name: 'Create Instance'

on:
  # push:
  #   branches:
  #   - main
  # pull_request:

  workflow_dispatch:
    inputs:
      ALATION_VERSION:
        description: 'Alation k8s build version to install'
        required: true
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ami: [ami-0443305dabd4be2bc]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TERRAFORM_STRING: '-var="image_id=${{ matrix.ami }}"
        -var="alation_version=${{ github.event.inputs.ALATION_VERSION }}"
        -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}"
        -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        -var="instanceName=alation-test-k8s-$GITHUB_RUN_NUMBER-${{ matrix.ami }}"
        '

    defaults:
      run:
        shell: bash
        working-directory: .github/terraform

    steps:
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Configure AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_S3_REGION }}

    - name: Copy key from S3 bucket
      run: |
        aws s3 cp s3://gh-action-tf-state/gh-actions-terraform.pem ~/.ssh/gh-actions-terraform.pem
    
    - name: Presign release artifact for easy download using curl in any operating system
      run: |
        echo BUILD_DOWNLOAD_URL=`aws s3 presign s3://${{ secrets.S3_RELEASE_BUCKET_NAME }}/${{ github.event.inputs.ALATION_VERSION }}.tar.gz --expires-in 900` >> $GITHUB_ENV

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="key=$GITHUB_RUN_NUMBER/${{ matrix.ami }}/terraform.tfstate"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan ${{ env.TERRAFORM_STRING }} -var="build_download_url=${{ env.BUILD_DOWNLOAD_URL }}"

    # Apply the changes to the AWS
    - name: Terraform Apply
      run: terraform apply -auto-approve ${{ env.TERRAFORM_STRING }} -var="build_download_url=${{ env.BUILD_DOWNLOAD_URL }}"

