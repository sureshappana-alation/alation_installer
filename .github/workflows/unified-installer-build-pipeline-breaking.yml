name: unified-installer-build-pipeline-final-breaking

on:
  # Run the job when pull request closed
  # This job will only run if the PR has been merged.
  # This is commented for now to trigger the job manually only
  # pull_request:
  #   types: [ closed ]

  # This section is to trigger the workflow manually
  workflow_dispatch:
    inputs:
      KURL:
        description: 'KURL: KURL version'
        required: false
      ALATIONANALYTICS:
        description: 'ALATIONANALYTICS: Alation Analytics version'
        required: false
      EXCLUDE_MODULES:
        description: 'List of comma separated modules to be excluded'
        required: false

env:
  S3_DEV_BUCKET_URL: "s3://${{ secrets.S3_DEV_BUCKET_NAME }}"
  S3_RELEASE_BUCKET_URL: "s3://${{ secrets.S3_RELEASE_BUCKET_NAME }}"
  BASE_DIR: ./alation
  RESOURCE_DIR: ./alation/res
  MODULES_DIR: ./alation/res/modules
  KURL_PATCH_DIR: ./alation/res/kurl_patch
  ALATION_OUTPUT_DIR: alation-$GITHUB_RUN_NUMBER
  ALATION_OUTPUT: alation-$GITHUB_RUN_NUMBER.tar.gz
  VERSIONS_FILE: ./alation/versions.txt
  INSTALL_CONFIG_FILE: ./alation/alation_install.yaml

jobs:
  # Build job builds the installer go module which generates and exports go binary
  build:
    # This job will only run if the PR has been merged.
    # This is commented for now to trigger the job manually only
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Setup golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.4
    
    - name: Copy go artifacts to respective directories
      run: |
        cd ${{ github.workspace }}/installer
        cp go.sum src/go.sum
        cp go.mod src/go.mod
    
    - name: Build installer
      run: |
        cd ${{ github.workspace }}/installer/src
        go build -o out/installer *.go
    
    - name: List of files in the out directory
      run: find ${{ github.workspace }}/installer/src/out

    - name: Upload installer binary for app-setup job
      uses: actions/upload-artifact@v2
      with:
        name: installer-binary
        path: ${{ github.workspace }}/installer/src/out
        retention-days: 1

  # This job is for creating alation unified installer build
  app-setup:
    runs-on: ubuntu-latest
    # This job will only run if the PR has been merged.
    # This is commented for now to trigger the job manually only
    # if: github.event.pull_request.merged == true
    # needs: build
    env:
      INPUT_KURL: ${{ github.event.inputs.KURL }}
      EXCLUDE_MODULES_STRING: ${{ github.event.inputs.EXCLUDE_MODULES }}
      INPUT_ALATIONANALYTICS: ${{ github.event.inputs.ALATIONANALYTICS }}      

    steps:   
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Make scripts executable
        run: chmod +x ${{ github.workspace }}/.github/scripts/*.sh

      - name: Bootstrap environment
        run: ${{ github.workspace }}/.github/scripts/setup.sh
        env:
          modules: ${{ steps.read_env.outputs.modulesList }}

      - name: Get module versions and apply overrides
        id: read_env
        run: ${{ github.workspace }}/.github/scripts/get-module-versions.sh

      - name: Download modules from S3
        run: ${{ github.workspace }}/.github/scripts/download-modules.sh
        env:
          modules: ${{ steps.read_env.outputs.modulesList }}

      - name: Generate alation-install.yaml file
        run: ${{ github.workspace }}/.github/scripts/generate-alation-install.sh

      - name: Download installer binary from build job
        uses: actions/download-artifact@v2
        with:
          name: installer-binary
          path: ${{ env.BASE_DIR }}

      # Caching Kurl package
      - name: Importing kurl package from cache
        id: kurl-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.RESOURCE_DIR }}/kurl.tar.gz
          key: ${{ env.KURL_FILE_NAME }}

      - name: In the case of cache miss get the Kurl package from S3
        if: steps.kurl-cache.outputs.cache-hit != 'true'
        run: |
          echo "Downloading Kurl package ${{env.KURL_FILE_NAME}} from S3. "
          aws s3 cp ${{ env.S3_DEV_BUCKET_URL }}/${{ env.KURL_FILE_NAME }} ${{ env.RESOURCE_DIR }}/kurl.tar.gz

      - name: Print information
        run: |
          echo "List of files"
          find ${{ env.BASE_DIR }}

          echo "Print list of versions information"
          cat ${{ env.VERSIONS_FILE }}

          echo "Content of alation-install.yaml file"
          cat  ${{ env.INSTALL_CONFIG_FILE }}

      - name: Renaming base directory to alation version
        run: mv ${{ env.BASE_DIR }} ${{ env.ALATION_OUTPUT_DIR }}

      - name: Compress the final bundle
        run: tar -cvzf ${{ env.ALATION_OUTPUT }} ${{ env.ALATION_OUTPUT_DIR }}

      - name: Renaming alation version directory back to original for caching
        run: mv ${{ env.ALATION_OUTPUT_DIR }} ${{ env.BASE_DIR }}

      - name: Upload the compressed build to S3
        run: |
          aws s3 cp ${{ env.ALATION_OUTPUT }} ${{ env.S3_RELEASE_BUCKET_URL }}/${{ env.ALATION_OUTPUT }}
