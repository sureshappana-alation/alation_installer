name: env-var-test
on:
  workflow_dispatch:
    inputs:
      ALATION_ANALYTICS:
        description: 'Alation analytics version'
        required: false
      OCF:
        description: 'OCF version'
        required: false
      KURL:
        description: 'KURL Version'
        required: false
jobs:
  env-test:
    runs-on: ubuntu-latest
    env:
      INPUT_KURL: ${{ github.event.KURL }}
      INPUT_NGINX-INGRESS-CONTROLLER: ${{ github.event.NGINX-INGRESS-CONTROLLER }}
    steps:
      - name: Set service list
        id: env-list
        run: echo ::set-output name=applicationList::["ocf", "NGINX-INGRESS-CONTROLLER"]
      - name: Apply env variables
        uses: actions/checkout@v2
      - name: Output array
        run: echo ${{ steps.env-list.outputs.applicationList }}
      - name: Read versions files
        id: read_env
        run: |
          applicationList=()
          shopt -s nullglob
          for i in ./versions1/*.sh; do
            while read line || [ -n "$line" ];
            do
                set -f; IFS="="; application=($line)
                if [[ "${application[0],,}" != *"kurl"* ]];then
                  applicationList+=(${application[0]})
                fi
            done < "${i}"
            cat "$i"
            echo
          done  >> $GITHUB_ENV
          echo ::set-output name=applicationList::${applicationList[@]}
      - name: apply overrides
        run: |
          for i in ${{ steps.read_env.outputs.applicationList }}; do
            echo $i=${INPUT_i:-$i} >> $GITHUB_ENV
          done
      - name: print final versions
        run: printenv
      # - name: Override manual inputs
      #   run: |
      #     echo ${{ steps.read_env.outputs.applicationList }}
      # - name: Print env
      #   run: |
      #     printenv
      # - name: Apply overrides
      #   env:
      #     OCF_INPUT: ${{ github.event.inputs.OCF }}
      #   run: |
      #     echo OCF=${OCF_INPUT:-$OCF} >> $GITHUB_ENV
      # - name: Final versions
      #   run: |
      #     echo $OCF
