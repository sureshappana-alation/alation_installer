name: env-var-test
on:
  workflow_dispatch:
    inputs:
      ALATION_ANALYTICS:
        description: 'Alation analytics version'
        required: false
      OCF:
        description: 'OCF version'
        required: false
      KURL:
        description: 'KURL Version'
        required: false
      NGINX-INGRESS-CONTROLLER:
        description: 'Nginx ingress Version'
        required: false
jobs:
  env-test:
    runs-on: ubuntu-latest
    env:
      INPUT_KURL: ${{ github.event.inputs.KURL }}
      INPUT_NGINX-INGRESS-CONTROLLER: ${{ github.event.inputs.NGINX-INGRESS-CONTROLLER }}
    steps:
      - name: Apply env variables
        uses: actions/checkout@v2
      - name: Output array
        run: echo ${{ steps.env-list.outputs.applicationList }}
      - name: Read versions files
        id: read_env
        run: |
          applicationList=()
          shopt -s nullglob
          for i in ./versions1/*.sh; do
            while read line || [ -n "$line" ];
            do
                set -f; IFS="="; application=($line)
                echo "${application[0],,}"
                echo "${application[0]}"
                if [[ "${application[0],,}" != *"KURL"* ]];then
                  applicationList+=(${application[0]})
                fi
            done < "${i}"
            cat "$i"
            echo
          done  >> $GITHUB_ENV
          echo ::set-output name=applicationList::${applicationList[@]}
      # - name: Apply Overrides
      #   id: env-list
      #   run: |
      #     echo KURL=${INPUT_KURL:-$KURL} >> $GITHUB_ENV
      #     echo NGINX_INGRESS_CONTROLLER=${INPUT_NGINX_INGRESS_CONTROLLER:-$NGINX_INGRESS_CONTROLLER} >> $GITHUB_ENV
      #     echo ::set-output name=applicationList::["NGINX_INGRESS_CONTROLLER"]

      - name: apply overrides (working)
        run: |
          echo KURL=${INPUT_KURL:-$KURL} >> $GITHUB_ENV
          for i in ${{ steps.read_env.outputs.applicationList }}; do
            input_key="INPUT_$i"
            echo "$i=${!input_key:-${!i}}" >> $GITHUB_ENV
          done
      - name: printing applicationlist
        run: |
          echo ${{ steps.read_env.outputs.applicationList }}
      - name: Process files
        run: |
          for i in ${{ steps.read_env.outputs.applicationList }}; do
            applicationName="${i,,}"
            if [ ${!i} = "null" ]; then
              echo "Skipping $applicationName"
            else
              echo "Downloading $application from S3"
            fi
          done

      # - name: apply overrides (working)
      #   run: |
      #     echo KURL=${INPUT_KURL:-$KURL} >> $GITHUB_ENV
      #     for i in ${{ steps.read_env.outputs.applicationList }}; do
      #       input_key="INPUT_$i"
      #       input_val=${!input_key}
      #       if [ ! -z $input_val ]; then
      #         echo "$i=$input_val" >> $GITHUB_ENV
      #       fi
      #     done
      - name: print final versions
        run: printenv
      # - name: Override manual inputs
      #   run: |
      #     echo ${{ steps.read_env.outputs.applicationList }}
      # - name: Print env
      #   run: |
      #     printenv
      # - name: Apply overrides
      #   env:
      #     OCF_INPUT: ${{ github.event.inputs.OCF }}
      #   run: |
      #     echo OCF=${OCF_INPUT:-$OCF} >> $GITHUB_ENV
      # - name: Final versions
      #   run: |
      #     echo $OCF
