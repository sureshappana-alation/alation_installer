name: unified-installer-final

on:
  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      ALATION_ANALYTICS:
        description: 'Alation analytics version'
        required: false
      OCF:
        description: 'OCF version'
        required: false
      KURL:
        description: 'KURL Version'
        required: false

env:
  S3_DEV_BUCKET_URL: "s3://${{ secrets.S3_DEV_BUCKET_NAME }}"
  S3_RELEASE_BUCKET_URL: "s3://${{ secrets.S3_RELEASE_BUCKET_NAME }}"
  BASE_DIR: ./alation
  RESOURCE_DIR: ./alation/res
  MODULES_DIR: ./alation/res/modules
  KURL_PATCH_DIR: ./alation/res/kurl_patch
  ALATION_OUTPUT: alation-$GITHUB_RUN_NUMBER.tar.gz

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Build installer binary
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./installer
          push: false
          tags: alation/installer:latest
          outputs: type=docker,dest=installer.tar.gz

  download:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
              
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: Read environment versions files
        id: read_env
        run: |
          applicationList=()
          for i in ./versions/*.sh; do
            while read line || [ -n "$line" ];
            do
                set -f; IFS="="; application=($line)
                applicationList+=(${application[0]})
            done < "${i}"
            cat "$i"
            echo
          done  >> $GITHUB_ENV
          # echo APPLICATION_LIST=${applicationList[@]} >> $GITHUB_ENV
          echo ::set-output name=applicationList::${applicationList[@]}

      - name: Set environment variables
        run: |
          echo KURL_FILE_NAME=kurl-${{ env.KURL }}.tar.gz >> $GITHUB_ENV
      - name: Creating required directories
        run: |
          mkdir -p ${{ env.BASE_DIR }}
          mkdir -p ${{ env.MODULES_DIR }}
          mkdir -p ${{ env.KURL_PATCH_DIR }}


      # - name: Verify Kurl Package ${{ env.KURL_FILE_NAME }} exists in the S3 bucket
      #   run: |
      #     exists=$(aws s3api list-objects-v2 --bucket ${{ secrets.S3_DEV_BUCKET_NAME }} --query "contains(Contents[].Key, '{{ env.KURL_FILE_NAME }}')")
      #     if [ not $exists ]; then
      #       echo "Kurl Package ${{ env.KURL_FILE_NAME }} does not exists in S3. Downloading it"
      #       curl -LO https://k8s.kurl.sh/bundle/${{ env.KURL_FILE_NAME }}
      #       echo "Uploading Kurl Package with ${{ env.KURL_FILE_NAME }} to S3"
      #       aws s3 cp ${{env.KURL_FILE_NAME}} ${{ env.S3_DEV_BUCKET_URL }}/${{env.KURL_FILE_NAME}}
      #       if [ $? -eq 0 ]; then
      #         echo "Successfully uploaded Kurl package ${{ env.KURL_FILE_NAME }} to S3"
      #       else
      #         echo FAIL
      #       fi
      #     else
      #       echo "Kurl Package ${{ env.KURL_FILE_NAME }} exists in S3. Skipping downloading"
      #     fi
      - name: Download files from S3
        run: |
          for i in ${{ steps.read_env.outputs.applicationList }}; do
            echo $i
          done

      - name: Copy res content from source code to archiving directory
        run: |
          cp -a ${{ github.workspace }}/installer/res/. ${{ env.BASE_DIR }}/res/

      - name: Download files from S3
        run: |
          for i in ${{ steps.read_env.outputs.applicationList }}; do
            applicationName="${i,,}"
            application="${applicationName}-${!i}.tar.gz"
            echo "$applicationName and version $applicationTag"            
            aws s3 cp ${{ env.S3_DEV_BUCKET_URL }}/$application ${{env.MODULES_DIR}}/$applicationName/
          done
