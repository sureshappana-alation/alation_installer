name: unified-installer-final

on:
  push:
    branches: [main]

  workflow_dispatch:
    inputs:
      ALATION_ANALYTICS:
        description: 'Alation analytics version'
        required: false
      OCF:
        description: 'OCF version'
        required: false
      KURL:
        description: 'KURL Version'
        required: false

env:
  S3_DEV_BUCKET_URL: "s3://${{ secrets.S3_DEV_BUCKET_NAME }}"
  S3_RELEASE_BUCKET_URL: "s3://${{ secrets.S3_RELEASE_BUCKET_NAME }}"
  BASE_DIR: ./alation
  RESOURCE_DIR: ./alation/res
  MODULES_DIR: ./alation/res/modules
  KURL_PATCH_DIR: ./alation/res/kurl_patch
  ALATION_BUILD_OUTPUT: alation-$GITHUB_RUN_NUMBER.tar.gz

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create output directory
        run: |
          mkdir -p ${{ env.BASE_DIR }}
      
      - name: Build installer binary
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./installer
          push: false
          tags: alation/installer:latest
          outputs: type=docker,dest=${{ env.BASE_DIR }}/installer.tar.gz
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: List of files
        run: find ${{ env.BASE_DIR }}

      - name: Upload installer binary for package job
        uses: actions/upload-artifact@v2
        with:
          name: docker-artifact
          path: ${{ env.BASE_DIR }}
          retention-days: 1

  download:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
              
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: Read environment versions files
        id: read_env
        run: |
          applicationList=()
          for i in ./versions/*.sh; do
            while read line || [ -n "$line" ];
            do
                set -f; IFS="="; application=($line)
                applicationList+=(${application[0]})
            done < "${i}"
            cat "$i"
            echo
          done  >> $GITHUB_ENV
          # echo APPLICATION_LIST=${applicationList[@]} >> $GITHUB_ENV
          echo ::set-output name=applicationList::${applicationList[@]}

      - name: Set environment variables
        run: |
          echo KURL_FILE_NAME=kurl-${{ env.KURL }}.tar.gz >> $GITHUB_ENV
      - name: Creating required directories
        run: |
          mkdir -p ${{ env.BASE_DIR }}
          mkdir -p ${{ env.MODULES_DIR }}
          mkdir -p ${{ env.KURL_PATCH_DIR }}

      - name: Copy res content from source code to archiving directory
        run: |
          cp -a ${{ github.workspace }}/installer/res/. ${{ env.BASE_DIR }}/res/

      - name: Download files from S3
        run: |
          for i in ${{ steps.read_env.outputs.applicationList }}; do
            applicationName="${i,,}"
            application="${applicationName}-${!i}.tar.gz"
            echo "Downloading $application"
            aws s3 cp ${{ env.S3_DEV_BUCKET_URL }}/$application ${{env.MODULES_DIR}}/$applicationName/
          done
      - name: Generate install-config.yaml file
        run: |
          touch ${{ env.BASE_DIR }}/install-config.yaml
          cd ${{ env.MODULES_DIR }}
          for dir in */; do
            directory=${dir%*/}
            files=$(ls $directory/*.tar.gz)
            if [ "${#files}" -gt 1 ]; then
                echo "Found ${files[0]}"
                moduleFile=${files[0]}
                echo "Extracting module $moduleFile"
                tar -xzf $moduleFile -C $directory  --strip-components=2
                if test -f "$directory/install.yaml"; then
                  echo "$directory/install.yaml" exists
                  echo "Appending $directory/install.yaml content to install-config.yaml file"
                  echo "$directory:" >> ${{ env.BASE_DIR }}/install-config.yaml
                  sed -e 's/^/  /' $directory/install.yaml >> ${{ env.BASE_DIR }}/install-config.yaml
                else
                  echo "$directory/install.yaml" doesn\'t exists
                fi
            else
              echo "No tar files found in $directory"
            fi
          done
      - name: Generate install-config.yaml file
        run: |
          echo "" >> ${{ env.BASE_DIR }}/install-config.yaml
          for directory in ${{ env.MODULES_DIR }}/; do
            module="$directory.tar.gz"
            moduleFile="${{ env.MODULES_DIR }}/$directory/$module"
            if test -f "$moduleFile"; then
              echo "Extracting module $moduleFile"
              tar -tf $moduleFile
              if test -f "$moduleFile/install.yaml"; then

              else
                echo "$moduleFile/install.yaml" doesn't exists
              fi
            else
              echo "$module not exists"
            fi
          done
      - name: print list of files
        run: find .
      
      - name: Upload ${{ env.BASE_DIR }}/ for package job
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: ${{ env.BASE_DIR }}
          retention-days: 1

  package:
    needs: [build, download]
    runs-on: ubuntu-latest
    steps:
      - name: Download installer from build job
        uses: actions/download-artifact@v2
        with:
          name: docker-artifact
          path: ${{ env.BASE_DIR }}
      
      - name: Download application resources from download job
        uses: actions/download-artifact@v2
        with:
          name: artifacts
          path: ${{ env.BASE_DIR }}

      - name: print list of files
        run: find .

      - name: Compress files
        run: tar -cvzf -cvzf ${{ env.ALATION_OUTPUT }} ./alation

      - name: Upload to final artifact to S3
        run: |
          aws s3 cp ${{ env.ALATION_OUTPUT }} ${{ env.S3_RELEASE_BUCKET_URL }}/${{ env.ALATION_OUTPUT }}
