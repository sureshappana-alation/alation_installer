# Default values for alation-helm-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: Name of the image
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

# The kubelet uses liveness probes to know when to restart a container.
# For example, liveness probes could catch a deadlock, where an application is running, but unable to make progress.
# Restarting a container in such a state can help to make the application more available despite bugs.
liveness:
  enabled: true
  endpoint: /liveness
  scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 15
  timeoutSeconds: 30 
  successThreshold: 1
  failureThreshold: 10

# The kubelet uses readiness probes to know when a container is ready to start accepting traffic.
# A Pod is considered ready when all of its containers are ready.
# One use of this signal is to control which Pods are used as backends for Services.
# When a Pod is not ready, it is removed from Service load balancers.
readiness:
  enabled: true
  endpoint: /readiness
  scheme: HTTP
  initialDelaySeconds: 10
  timeoutSeconds: 30
  periodSeconds: 15
  successThreshold: 1
  failureThreshold: 10

# The kubelet uses startup probes to know when a container application has started. 
# If such a probe is configured, it disables liveness and readiness checks until it succeeds,
# making sure those probes don't interfere with the application startup.
# Mostly required for legacy applications where more time required for starting.
# Note: Use it with caution. Mostly needed for legacy application
startup:
  enabled: false
  endpoint: /health
  scheme: HTTP
  initialDelaySeconds: 10
  timeoutSeconds: 30
  periodSeconds: 15
  successThreshold: 1
  failureThreshold: 10

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        backend:
          serviceName: chart-example.local
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

config:
  enabled: true
  entries:
  - isFile: false
    namePrefix: config1
    data:
      enemies: "aliens"
      lives: "3"
      enemies.cheat: "true"
  # - isFile: false
  #   namePrefix: config2
  #   filename: config2
  #   data:
  #     enemies: config2
  #     enemies.cheat.level: noGoodRotten

secret:
  enabled: true
  entries:
  - isFile: false
    namePrefix: secret1
    data:
      code.passphrase: UUDDLRLRBABAS
      code.allowed: true
      code.lives: 30
  # - isFile: true
  #   namePrefix: secret2
  #   filename: secret2
  #   data:
  #     enemies: secret2
  #     enemies.cheat.level: noGoodRotten


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# An example of dependent chart enable/disable scenario. Set it to enable the dependent chart.
# Dependent chart definition is available in chart.yaml. Remove/update both sections
# according to your service requirements. Remove this if you don't need
# nginx:
#   enabled: false
